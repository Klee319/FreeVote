version: '3.8'

services:
  # PostgreSQL データベース
  postgres:
    image: postgres:15-alpine
    container_name: accent_vote_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-accent_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-accent_password}
      POSTGRES_DB: ${DB_NAME:-accent_vote_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=ja_JP.UTF-8"
      TZ: Asia/Tokyo
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./db/backup:/backup
    networks:
      - accent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-accent_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis キャッシュサーバー
  redis:
    image: redis:7-alpine
    container_name: accent_vote_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      TZ: Asia/Tokyo
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - accent_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: accent_vote_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    networks:
      - accent_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js アプリケーション (開発環境)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: accent_vote_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${DB_USER:-accent_user}:${DB_PASSWORD:-accent_password}@postgres:5432/${DB_NAME:-accent_vote_db}
      REDIS_URL: redis://redis:6379
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
    volumes:
      - ./:/app
      - /app/node_modules
      - /app/.next
    networks:
      - accent_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        if [ \"$NODE_ENV\" = \"production\" ]; then
          npm run build && npm run start
        else
          npm run dev
        fi
      "

  # pgAdmin (開発環境用)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: accent_vote_pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@accent-vote.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - accent_network
    profiles:
      - dev

  # Redis Commander (開発環境用)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: accent_vote_redis_commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: redis:redis:6379
    networks:
      - accent_network
    depends_on:
      - redis
    profiles:
      - dev

networks:
  accent_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: