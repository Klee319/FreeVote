// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id            String          @id @default(uuid())
  username      String?         @unique
  email         String?         @unique
  passwordHash  String?
  ageGroup      String          // 10代、20代、30代...
  prefecture    String          // 都道府県コード
  gender        String          // 男性/女性/その他

  // SNS連携情報
  provider      String?         // twitter, instagram, tiktok
  providerId    String?
  twitterId     String?         // Twitter ID
  instagramId   String?         // Instagram ID
  tiktokId      String?         // TikTok ID

  // プロフィール情報
  avatarUrl     String?         // アバター画像URL
  avatarSource  String?         // avatar_upload, twitter, instagram, tiktok
  bio           String?         // 自己紹介文（最大500文字）

  // 設定情報
  showInShareRanking Boolean     @default(true)  // シェアランキング表示設定
  showVoteHistory    Boolean     @default(true)  // 投票履歴表示設定

  // ステータス変更履歴
  lastStatusChangeDate DateTime? // 最後のステータス（年齢・県・性別）変更日

  // カウント情報
  referralCount Int             @default(0)
  shareCount    Int             @default(0)  // 総シェア数

  // 権限情報
  isAdmin       Boolean         @default(false)

  // タイムスタンプ
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // リレーション
  votes         PollVote[]
  referrals     UserReferral[]
  pollsCreated  Poll[]
  refreshTokens RefreshToken[]
  requests      UserVoteRequest[]
  pollSuggestions PollSuggestion[]
  shareActivities UserShareActivity[]  // シェア活動記録
  shareRankings ShareRanking[]  // シェアランキング

  @@index([email])
  @@index([provider, providerId])
  @@index([shareCount])
  @@index([twitterId])
  @@index([instagramId])
  @@index([tiktokId])
}

// リフレッシュトークン管理
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

// 投票モデル
model Poll {
  id                String      @id @default(uuid())
  title             String
  description       String?
  isAccentMode      Boolean     @default(false)
  wordId            Int?        // アクセント投票の場合の単語ID
  options           String      // 選択肢配列 [{label, thumbnailUrl, pitchPattern?, voiceSampleUrl?}] (JSON文字列)
  deadline          DateTime?
  shareMessage      String?
  shareHashtags     String?
  thumbnailUrl      String?
  optionThumbnails  String?     // 各選択肢のサムネイル画像URL配列 (JSON文字列)
  categories        String      // カテゴリ配列 (JSON文字列)
  status            String      @default("active") // active, closed, draft
  viewCount         Int         @default(0)
  shareCount        Int         @default(0)  // 総シェア数
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  createdBy         String
  creator           User        @relation(fields: [createdBy], references: [id])

  votes             PollVote[]
  referrals         UserReferral[]
  shareActivities   UserShareActivity[]  // シェア活動

  @@index([status])
  @@index([createdAt])
  @@index([deadline])
  @@index([shareCount])
}

// 投票記録モデル
model PollVote {
  id          String   @id @default(uuid())
  pollId      String
  poll        Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option      Int      // 選択肢インデックス (0-3)
  prefecture  String
  ageGroup    String?
  gender      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  userToken   String   // 匿名ユーザー識別用トークン
  votedAt     DateTime @default(now())

  @@unique([pollId, userToken]) // 同一投票に対して同じユーザートークンで重複投票不可
  @@index([pollId])
  @@index([userId])
  @@index([votedAt])
}

// ユーザー投票提案モデル
model UserVoteRequest {
  id              String    @id @default(uuid())
  title           String
  description     String?
  options         String    // 選択肢候補の配列 (JSON文字列)
  categories      String    // カテゴリ (JSON文字列)
  likeCount       Int       @default(0)
  status          String    @default("pending") // pending, approved, rejected
  rejectionReason String?   // 却下理由
  adminComment    String?   // 管理者コメント
  reviewedAt      DateTime? // レビュー日時
  reviewedBy      String?   // レビュー担当者ID
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([reviewedAt])
}

// 投票提案モデル（新機能）
model PollSuggestion {
  id              String   @id @default(uuid())
  title           String
  description     String?
  options         String   // 選択肢候補の配列 [{label, description?}] (JSON文字列)
  categories      String   // カテゴリ (JSON文字列)
  status          String   @default("pending") // pending, approved, rejected
  rejectionReason String?  // 却下理由
  adminComment    String?  // 管理者コメント
  reviewedAt      DateTime? // レビュー日時
  reviewedBy      String?   // レビュー担当者ID
  createdBy       String
  creator         User     @relation(fields: [createdBy], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([reviewedAt])
}

// ユーザー紹介記録モデル
model UserReferral {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollId       String
  poll         Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  visitorToken String
  referredAt   DateTime @default(now())

  @@unique([userId, pollId, visitorToken]) // 同一ユーザー・投票・訪問者の組み合わせで重複不可
  @@index([userId])
  @@index([pollId])
  @@index([referredAt])
}

// ユーザーシェア活動記録モデル
model UserShareActivity {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollId    String
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  platform  String   // twitter, instagram, tiktok, line, copy
  sharedAt  DateTime @default(now())

  @@unique([userId, pollId, platform]) // 同一ユーザー・投票・プラットフォーム重複防止
  @@index([userId])
  @@index([sharedAt])
  @@index([platform])
}

// シェアランキングキャッシュモデル
model ShareRanking {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  period      String   // today, week, month, all
  shareCount  Int      @default(0)
  rank        Int
  prevRank    Int?     // 前回の順位（変動追跡用）
  calculatedAt DateTime @default(now())

  @@unique([userId, period])
  @@index([period, rank])
  @@index([calculatedAt])
}

// アプリ設定モデル（サイト全体の設定）
model AppSettings {
  id                String   @id @default(uuid())
  key               String   @unique
  value             String   // (JSON文字列)
  description       String?
  updatedAt         DateTime @updatedAt

  @@index([key])
}