// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id            String          @id @default(uuid())
  username      String?         @unique
  email         String?         @unique
  passwordHash  String?
  ageGroup      String          // 10代、20代、30代...
  prefecture    String          // 都道府県コード
  gender        String          // 男性/女性/その他
  provider      String?         // twitter, instagram, tiktok
  providerId    String?
  referralCount Int             @default(0)
  isAdmin       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  votes         PollVote[]
  referrals     UserReferral[]
  pollsCreated  Poll[]
  refreshTokens RefreshToken[]
  requests      UserVoteRequest[]

  @@index([email])
  @@index([provider, providerId])
}

// リフレッシュトークン管理
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

// 投票モデル
model Poll {
  id                String      @id @default(uuid())
  title             String
  description       String?
  isAccentMode      Boolean     @default(false)
  wordId            Int?        // アクセント投票の場合の単語ID
  options           Json        // 選択肢配列 [{label, thumbnailUrl, pitchPattern?, voiceSampleUrl?}]
  deadline          DateTime?
  shareMessage      String?
  shareHashtags     String?
  thumbnailUrl      String?
  optionThumbnails  Json?       // 各選択肢のサムネイル画像URL配列
  categories        String[]    // カテゴリ配列
  status            String      @default("active") // active, closed, draft
  viewCount         Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  createdBy         String
  creator           User        @relation(fields: [createdBy], references: [id])

  votes             PollVote[]
  referrals         UserReferral[]

  @@index([status])
  @@index([createdAt])
  @@index([deadline])
}

// 投票記録モデル
model PollVote {
  id          String   @id @default(uuid())
  pollId      String
  poll        Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option      Int      // 選択肢インデックス (0-3)
  prefecture  String
  ageGroup    String?
  gender      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  userToken   String   // 匿名ユーザー識別用トークン
  votedAt     DateTime @default(now())

  @@unique([pollId, userToken]) // 同一投票に対して同じユーザートークンで重複投票不可
  @@index([pollId])
  @@index([userId])
  @@index([votedAt])
}

// ユーザー投票提案モデル
model UserVoteRequest {
  id          String   @id @default(uuid())
  title       String
  description String?
  options     Json     // 選択肢候補の配列
  categories  String[] // カテゴリ
  likeCount   Int      @default(0)
  status      String   @default("pending") // pending, approved, rejected
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
}

// ユーザー紹介記録モデル
model UserReferral {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pollId       String
  poll         Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  visitorToken String
  referredAt   DateTime @default(now())

  @@unique([userId, pollId, visitorToken]) // 同一ユーザー・投票・訪問者の組み合わせで重複不可
  @@index([userId])
  @@index([pollId])
  @@index([referredAt])
}

// アプリ設定モデル（サイト全体の設定）
model AppSettings {
  id                String   @id @default(uuid())
  key               String   @unique
  value             Json
  description       String?
  updatedAt         DateTime @updatedAt

  @@index([key])
}